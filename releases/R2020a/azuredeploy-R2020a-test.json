{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "ClusterName": {
            "defaultValue": "myCluster",
            "minLength": 1,
            "maxLength": 61,
            "type": "String",
            "metadata": {
                "description": "A name to use for this cluster. This name will be shown in MATLAB as the cluster profile name."
            }
        },
        "NumWorkerNodes": {
            "defaultValue": 2,
            "minValue": 0,
            "maxValue": 1000,
            "type": "Int",
            "metadata": {
                "description": "The number of Azure instances to start for the workers to run on."
            }
        },
        "NumWorkersPerNode": {
            "defaultValue": 2,
            "minValue": 1,
            "type": "Int",
            "metadata": {
                "description": "The number of MATLAB workers to start on each instance. Specify 1 worker for every 2 vCPUs, because this results in 1 worker per physical core. For example a Standard_D64s_v3 instance has 64 vCPUs, so can support 32 MATLAB workers. See https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes for details on vCPUs for each instance type."
            }
        },
        "HeadnodeInstanceType": {
            "defaultValue": "Standard_D4s_v3",
            "minLength": 1,
            "type": "String",
            "metadata": {
                "description": "The Azure instance type to use for the head node, which will run the job manager. No workers will be started on this node, so this can be a smaller instance type than the worker nodes. See  https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes. for a list of instance types."
            }
        },
        "WorkerInstanceType": {
            "defaultValue": "Standard_F4s_v2",
            "minLength": 1,
            "type": "String",
            "metadata": {
                "description": "The Azure instance type to use for the workers. See https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes for a list of instance types."
            }
        },
        "DatabaseVolumeSize": {
            "defaultValue": 100,
            "minValue": 0,
            "maxValue": 1023,
            "type": "Int",
            "metadata": {
                "description": "The size of the volume in Gigabytes used to store the database files. If set to 0, a separate volume will not be created and the root volume will be used for the database."
            }
        },
        "ClientIPAddress": {
            "minLength": 1,
            "type": "String",
            "metadata": {
                "description": "The IP address range that can be used to access the cluster from MATLAB. This must be a valid IP CIDR range of the form x.x.x.x/x. Use the value <your_public_ip_address>/32 to restrict access to only your computer."
            }
        },
        "AdminUsername": {
            "defaultValue": "clouduser",
            "type": "String",
            "metadata": {
                "description": "Choose the admin username for all instances. This username is required when logging into any instance using remote desktop protocol."
            }
        },
        "AdminPassword": {
            "type": "SecureString",
            "metadata": {
                "description": "Choose the admin password for all instances. This password is required when logging into any instance using remote desktop protocol. For the deployment to succeed, your password must meet Azure's password requirements. See https://docs.microsoft.com/en-us/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm for information on the password requirements."
            }
        },
        "LicenseServer": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Optional License Manager for MATLAB string in the form port@hostname. If not specified, online licensing is used. If specified, the license manager must be accessible from the specified virtual network and subnets."
            }
        },
        "vmdisk1Uri": {
            "type": "string",
            "metadata": {
                "description": "URI of the image to use"
            }
        },
        "userImageStorageAccountResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "The storage account resource group into which to put the VHD. Must be the same as the storage account resource group that contains vmdisk1Uri."
            }
        },
        "userImageStorageAccountName": {
            "type": "string",
            "metadata": {
                "description": "The storage account into which to put the VHD. Must be the same as the storage account that contains vmdisk1Uri."
            }
        }
    },
    "variables": {
        "namingPrefix": "[toLower(take(parameters('ClusterName'), 15))]",
        "ArtifactsBase": "C:/Windows/Temp/",
        "addressPrefix": "10.0.0.0/16",
        "subnetPrefix": "10.0.0.0/24",
        "newOrExistingVirtualNetwork": "New",
        "virtualNetworkCreateName": "[concat(variables('namingPrefix'), '-vnet')]",
        "subnetCreateName": "[concat(variables('namingPrefix'), '-subnet')]",
        "virtualNetworkName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),last(split(parameters('VirtualNetworkResourceID'),'/')),variables('virtualNetworkCreateName'))]",
        "SubnetName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),parameters('SubnetName'),variables('subnetCreateName'))]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('SubnetName'))]",
        "subnetId": "[if(equals(variables('newOrExistingVirtualNetwork'),'New'),variables('subnetRef'),concat(parameters('VirtualNetworkResourceID'), '/subnets/', parameters('SubnetName')))]",
        "licenseServer": "[if(equals(parameters('LicenseServer'),''),'mhlm',parameters('LicenseServer'))]",
        "providerID": "8AE0EA28-E1D4-4627-9459-99DD4120C96E",
        "headnodeMachineName": "[concat(take(variables('namingPrefix'), 6), '-headnode')]",
        "vmssName": "[concat(take(variables('namingPrefix'), 4), '-vmss')]",
        "osDisk": {
            "name": "[concat(variables('vmName'),'-osDisk')]",
            "osType": "Windows",
            "caching": "ReadOnly",
            "createOption": "FromImage",
            "image": {
                "uri": "[parameters('vmdisk1Uri')]"
            }
        },
        "storageProfileWithoutDataDisk": {
            "osDisk": "[variables('osDisk')]"
        },
        "publicIPPostfix": "pub",
        "headnodeIPName": "[concat(variables('namingPrefix'), variables('publicIPPostfix'))]",
        "dnsLabelPrefix": "[concat('azure-', uniqueString(resourceGroup().id))]",
        "publicIpTimeout": "20",
        "networkInterfacePostfix": "nic",
        "publicIpConfigPostfix": "ipConfig",
        "networkSecurityGroupName": "[concat(variables('namingPrefix'), '-nsg')]",
        "totalPorts": "[add(7, mul(4, parameters('NumWorkersPerNode')))]",
        "startPort": 27350,
        "finalPort": "[add(variables('startPort'), variables('totalPorts'))]",
        "storageAccountName": "[concat(take(concat(variables('namingPrefix'), uniquestring(resourceGroup().id)), 17), 'storage')]",
        "storageAccountType": "Standard_LRS",
        "scriptsUrl": "C:/Windows/Temp/",
        "startScript": "startmjs.ps1",
        "fileUris": [
            "[concat(variables('scriptsUrl'), variables('startScript'))]",
            "[concat(variables('scriptsUrl'), 'createFileShare.ps1')]",
            "[concat(variables('scriptsUrl'), 'listFileShares.ps1')]"
        ],
        "scriptExe": "[concat(variables('ArtifactsBase'), variables('startScript'))]",
        "installCommand": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('scriptExe'), ' -ClusterName ', parameters('ClusterName'), ' -HeadnodeInternalHostname ', variables('headnodeMachineName'), ' -LicenseServer ', variables('licenseServer'))]",
        "installHeadnodeCommand": "[concat(variables('installCommand'), ' -Role headnode -NumWorkers 0')]",
        "installWorkerCommand": "[concat(variables('installCommand'), ' -Role worker -NumWorkers ', parameters('NumWorkersPerNode'))]",
        "stopSpoolerServiceCommand": "[concat('powershell -command ','Stop-Service -Name Spooler -Force; Set-Service -Name Spooler -StartupType Disabled')]",
        "tagsForAll": {
            "provider": "[variables('providerID')]"
        },
        "vmName": "servermachine",
        "storageAccountApiVersion": "2018-07-01"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2017-03-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": "[variables('tagsForAll')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetCreateName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            },
            "condition": "[equals(variables('newOrExistingVirtualNetwork'),'New')]"
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2017-06-01",
            "name": "[variables('headnodeIPName')]",
            "location": "[resourceGroup().location]",
            "tags": "[variables('tagsForAll')]",
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('headnodeMachineName'), variables('dnsLabelPrefix'))]"
                },
                "idleTimeoutInMinutes": "[variables('publicIpTimeout')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2017-06-01",
            "name": "[variables('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "tags": "[variables('tagsForAll')]",
            "sku": {
                "name": "[variables('storageAccountType')]"
            },
            "kind": "Storage",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2017-03-01",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "tags": "[variables('tagsForAll')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-rdp",
                        "properties": {
                            "priority": 1000,
                            "sourceAddressPrefix": "[parameters('ClientIPAddress')]",
                            "protocol": "Tcp",
                            "destinationPortRange": "3389",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "mathworks-job-scheduler-inbound",
                        "properties": {
                            "priority": 1010,
                            "sourceAddressPrefix": "[parameters('ClientIPAddress')]",
                            "protocol": "Tcp",
                            "destinationPortRange": "[concat(variables('startPort'), '-', variables('finalPort'))]",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "allow-internal-traffic",
                        "properties": {
                            "priority": 1020,
                            "sourceAddressPrefix": "VirtualNetwork",
                            "protocol": "Tcp",
                            "destinationPortRange": "*",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "VirtualNetwork"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2017-03-01",
            "name": "[concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIpAddresses/', variables('headnodeIPName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
            ],
            "tags": "[variables('tagsForAll')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('headnodeMachineName'), variables('publicIpConfigPostfix'))]",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('headnodeIPName'))]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2017-03-30",
            "name": "[variables('headnodeMachineName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('headnodeMachineName'), variables('networkInterfacePostfix'))]"
            ],
            "tags": "[variables('tagsForAll')]",
            "properties": {
                "osProfile": {
                    "computerName": "[variables('headnodeMachineName')]",
                    "AdminUsername": "[parameters('AdminUsername')]",
                    "AdminPassword": "[parameters('AdminPassword')]",
                    "windowsConfiguration": {
                        "provisionVmAgent": "true"
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('HeadnodeInstanceType')]"
                },
                "storageProfile": {
                    "dataDisks": [
                        "[if(greater(parameters('databaseVolumeSize'), 0), json(concat('{\"name\": \"', concat(variables('namingPrefix'), '-database'), '\",\"diskSizeGB\": ', parameters('databaseVolumeSize'), ', \"lun\": \"', 0, '\", \"createOption\": \"Empty\", \"caching\": \"None\", \"vhd\": {\"uri\": \"', concat(reference(resourceId(parameters('userImageStorageAccountResourceGroupName'),'Microsoft.Storage/storageAccounts/', parameters('userImageStorageAccountName')), variables('storageAccountApiVersion')).primaryEndpoints.blob, 'vhds/',variables('vmName'), uniquestring(resourceGroup().id), '-dataDisk.vhd') , '\"}}')), json('null'))]"
                    ],
                    "osDisk": {
                        "name": "[concat(variables('vmName'),'-osDisk')]",
                        "osType": "Windows",
                        "caching": "ReadWrite",
                        "createOption": "FromImage",
                        "image": {
                            "uri": "[parameters('vmdisk1Uri')]"
                        },
                        "vhd": {
                            "uri": "[concat(reference(resourceId(parameters('userImageStorageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('userImageStorageAccountName')), variables('storageAccountApiVersion')).primaryEndpoints.blob, 'vhds/',variables('vmName'), uniquestring(resourceGroup().id), '-osDisk.vhd')]"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('headnodeMachineName'), variables('networkInterfacePostfix')))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2017-03-30",
            "name": "[concat(variables('headnodeMachineName'), '/Installation')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
            ],
            "tags": "[variables('tagsForAll')]",
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": "[variables('fileUris')]"
                },
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('stopSpoolerServiceCommand'),'; ', variables('installHeadnodeCommand'), ' -StorageAccountName ', variables('storageAccountName'), ' -StorageAccountKey ', listKeys(variables('storageAccountName'), '2017-06-01').keys[0].value, ' -HeadnodeExternalHostname ', reference(variables('headnodeIPName')).dnsSettings.fqdn, ' -HeadnodeInternalIPAddress ', reference(concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))).ipConfigurations[0].properties.privateIPAddress)]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "apiVersion": "2017-03-30",
            "name": "[variables('vmssName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIpAddresses/', variables('headnodeIPName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('headnodeMachineName'), variables('networkInterfacePostfix'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
            ],
            "tags": "[variables('tagsForAll')]",
            "sku": {
                "name": "[parameters('WorkerInstanceType')]",
                "tier": "Standard",
                "capacity": "[parameters('NumWorkerNodes')]"
            },
            "properties": {
                "overprovision": false,
                "upgradepolicy": {
                    "mode": "Automatic"
                },
                "virtualMachineProfile": {
                    "osProfile": {
                        "computerNamePrefix": "[variables('vmssName')]",
                        "AdminUsername": "[parameters('AdminUsername')]",
                        "AdminPassword": "[parameters('AdminPassword')]",
                        "windowsConfiguration": {
                            "provisionVmAgent": true
                        }
                    },
                    "storageProfile": "[variables('storageProfileWithoutDataDisk')]",
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[concat(variables('vmssName'), variables('networkInterfacePostfix'))]",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "[concat(variables('vmssName'), variables('publicIpConfigPostfix'))]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[variables('subnetId')]"
                                                },
                                                "publicIpAddressConfiguration": {
                                                    "name": "[variables('publicIpPostfix')]",
                                                    "properties": {
                                                        "publicIpAllocationMethod": "Static",
                                                        "dnsSettings": {
                                                            "domainNameLabel": "[concat(variables('vmssName'), variables('dnsLabelPrefix'))]"
                                                        },
                                                        "idleTimeoutInMinutes": "[variables('publicIpTimeout')]"
                                                    }
                                                }
                                            }
                                        }
                                    ],
                                    "networkSecurityGroup": {
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                                    }
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "[concat(variables('vmssName'), 'installation')]",
                                "properties": {
                                    "publisher": "Microsoft.Compute",
                                    "type": "CustomScriptExtension",
                                    "typeHandlerVersion": "1.5",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "fileUris": "[variables('fileUris')]"
                                    },
                                    "protectedSettings": {
                                        "commandToExecute": "[concat(variables('stopSpoolerServiceCommand'),'; ', variables('installWorkerCommand'), ' -StorageAccountName ', variables('storageAccountName'), ' -StorageAccountKey ', listKeys(variables('storageAccountName'), '2017-06-01').keys[0].value, ' -HeadnodeExternalHostname ', reference(variables('headnodeIPName')).dnsSettings.fqdn, ' -HeadnodeInternalIPAddress ', reference(concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))).ipConfigurations[0].properties.privateIPAddress)]"
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "[concat('pid-', toLower(variables('providerID')))]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        }
    ],
    "outputs": {
        "VirtualNetworkResourceID": {
            "type": "String",
            "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
        }
    }
}